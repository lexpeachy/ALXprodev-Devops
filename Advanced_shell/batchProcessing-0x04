#!/bin/bash

# Pokémon list to fetch
pokemons=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")
base_url="https://pokeapi.co/api/v2/pokemon"
processes=()
output_dir="pokemon_data"

# Create output directory
mkdir -p "$output_dir"

# Function to fetch Pokémon data
fetch_pokemon() {
    local pokemon=$1
    local url="$base_url/$pokemon"
    local output_file="$output_dir/${pokemon}.json"
    
    echo "[$(date '+%T')] Starting fetch for $pokemon (PID: $$)"
    if curl -s "$url" -o "$output_file"; then
        echo "[$(date '+%T')] Successfully fetched $pokemon"
    else
        echo "[$(date '+%T')] Failed to fetch $pokemon" >&2
        return 1
    fi
}

# Function to show current jobs
job() {
    echo -e "\nCurrent background jobs:"
    jobs -l
}

# Function to clean up background processes
kill_all() {
    echo -e "\nKilling all background processes..."
    for pid in "${processes[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            echo "Killed process $pid"
        fi
    done
    processes=()
}

# Trap signals for proper cleanup
trap 'kill_all; exit' INT TERM EXIT

# Start fetching in parallel
echo "Starting Pokémon data fetch..."
for pokemon in "${pokemons[@]}"; do
    fetch_pokemon "$pokemon" &
    processes+=($!)
    echo "Started $pokemon (PID: $!)"
done

# Wait for all processes to complete
echo -e "\nWaiting for all processes to complete..."
for pid in "${processes[@]}"; do
    if wait "$pid"; then
        echo "Process $pid completed successfully"
    else
        echo "Process $pid failed" >&2
    fi
done

# All done
echo -e "\nAll Pokémon data fetched!"
echo "Results saved in $output_dir/"

# Reset trap
trap - INT TERM EXIT
