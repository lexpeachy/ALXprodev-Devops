#!/usr/bin/env python3

import os
import time
import subprocess
import multiprocessing
from concurrent.futures import ThreadPoolExecutor

def fetch_single_pokemon(pokemon):
    """Fetch data for a single Pokémon using curl"""
    try:
        curl_cmd = [
            "curl",
            "-s",
            "--connect-timeout", "10",
            "--max-time", "30",
            "-o", f"pokemon_data/{pokemon}.json",
            f"https://pokeapi.co/api/v2/pokemon/{pokemon}"
        ]
        subprocess.run(curl_cmd, check=True)
        print(f"Successfully fetched {pokemon}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Failed to fetch {pokemon}: {e}")
        return False

def parallel_fetch_pokemon():
    """Fetch all Pokémon data in parallel"""
    pokemon_list = ["bulbasaur", "ivysaur", "venusaur", "charmander", "charmeleon"]
    os.makedirs("pokemon_data", exist_ok=True)
    
    print("Starting parallel Pokémon data fetch...")
    start_time = time.time()
    
    # Using ThreadPoolExecutor for parallel execution
    with ThreadPoolExecutor(max_workers=3) as executor:
        # Submit all fetch tasks
        futures = [executor.submit(fetch_single_pokemon, p) for p in pokemon_list]
        
        # Wait for all tasks to complete
        results = [f.result() for f in futures]
    
    success_count = sum(results)
    total_time = time.time() - start_time
    
    print(f"\nFetch completed in {total_time:.2f} seconds")
    print(f"Successfully fetched {success_count}/{len(pokemon_list)} Pokémon")

if __name__ == "__main__":
    parallel_fetch_pokemon()
